"""
„Ç®„É©„ÉºË°®Á§∫„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„É¢„Ç∏„É•„Éº„É´

„Åì„ÅÆ„É¢„Ç∏„É•„Éº„É´„Åß„ÅØ„ÄÅStreamlit UI„Åß„ÅÆ„Ç®„É©„ÉºË°®Á§∫„Å´Èñ¢„Åô„Çã„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÂÆöÁæ©„Åó„Åæ„Åô„ÄÇ
„É¶„Éº„Ç∂„Éº„Éï„É¨„É≥„Éâ„É™„Éº„Å™„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„Å®Ë©≥Á¥∞ÊÉÖÂ†±„ÅÆË°®Á§∫„ÄÅ„Ç®„É©„ÉºÁ®ÆÈ°û„Å´Âøú„Åò„ÅüË°®Á§∫„Çπ„Çø„Ç§„É´„Å™„Å©„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ
"""

import traceback
import logging
from typing import Optional, Dict, Any, List, Union, Type
import streamlit as st

from ...utils.errors import (
    AppError, APIError, GeminiAPIError, ScraperError, ProcessingError,
    ValidationError, ResourceError, TemplateError, ExcelExportError,
    get_detailed_error_message, classify_error
)


# „Ç®„É©„Éº„Çø„Ç§„Éó„Å´Âøú„Åò„Åü„Ç¢„Ç§„Ç≥„É≥„Éû„ÉÉ„Éî„É≥„Ç∞
ERROR_ICONS = {
    'api': 'üåê',
    'scraping': 'üîç',
    'processing': 'üñºÔ∏è',
    'validation': '‚ö†Ô∏è',
    'resource': 'üìÅ',
    'template': 'üìù',
    'export': 'üìä',
    'config': '‚öôÔ∏è',
    'unknown': '‚ùì'
}

# „Ç®„É©„ÉºÈáçË¶ÅÂ∫¶„Å´Âøú„Åò„ÅüËâ≤„Éû„ÉÉ„Éî„É≥„Ç∞
SEVERITY_COLORS = {
    'error': 'red',
    'warning': 'orange',
    'info': 'blue',
    'success': 'green'
}


def display_error(
    error: Union[Exception, str],
    title: Optional[str] = None,
    show_details: bool = False,
    container: Optional[Any] = None
) -> None:
    """
    „Ç®„É©„Éº„ÇíË°®Á§∫„Åô„Çã
    
    Args:
        error: Ë°®Á§∫„Åô„Çã‰æãÂ§ñ„Åæ„Åü„ÅØ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
        title: „Ç®„É©„Éº„Çø„Ç§„Éà„É´ÔºàÊåáÂÆö„Åó„Å™„ÅÑÂ†¥Âêà„ÅØËá™ÂãïÁîüÊàêÔºâ
        show_details: Ë©≥Á¥∞ÊÉÖÂ†±„ÇíË°®Á§∫„Åô„Çã„Åã„Å©„ÅÜ„Åã
        container: Ë°®Á§∫„Åô„Çã„Ç≥„É≥„ÉÜ„ÉäÔºàÊåáÂÆö„Åó„Å™„ÅÑÂ†¥Âêà„ÅØst.errorÔºâ
    """
    container = container or st
    
    # „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆÊ∫ñÂÇô
    if isinstance(error, Exception):
        # ‰æãÂ§ñ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÂ†¥Âêà
        error_obj = error
        error_message = get_detailed_error_message(error)
        
        # „Ç®„É©„ÉºÂàÜÈ°û„ÅÆÂèñÂæó
        classification = classify_error(error)
        error_category = classification['category']
        error_severity = classification['severity']
        error_details = classification['details']
        
        # „Ç¢„Ç§„Ç≥„É≥„Å®Ëâ≤„ÅÆÂèñÂæó
        icon = ERROR_ICONS.get(error_category, ERROR_ICONS['unknown'])
        color = SEVERITY_COLORS.get(error_severity, 'red')
        
        # „Çø„Ç§„Éà„É´„ÅÆËá™ÂãïÁîüÊàêÔºàÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥ÂêàÔºâ
        if title is None:
            title = f"{icon} {error_category.capitalize()} Error"
    else:
        # ÊñáÂ≠óÂàó„ÅÆÂ†¥Âêà
        error_obj = None
        error_message = str(error)
        icon = ERROR_ICONS['unknown']
        color = SEVERITY_COLORS['error']
        error_details = {}
        
        # „Çø„Ç§„Éà„É´„ÅÆËá™ÂãïÁîüÊàêÔºàÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥ÂêàÔºâ
        if title is None:
            title = f"{icon} Error"
    
    # „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÅÆË°®Á§∫
    if error_severity == 'error':
        container.error(f"**{title}**")
        container.error(error_message)
    elif error_severity == 'warning':
        container.warning(f"**{title}**")
        container.warning(error_message)
    else:
        container.error(f"**{title}**")
        container.error(error_message)
    
    # Ë©≥Á¥∞ÊÉÖÂ†±„ÅÆË°®Á§∫Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    if show_details and error_obj is not None:
        with container.expander("Ë©≥Á¥∞ÊÉÖÂ†±"):
            # „Ç®„É©„Éº„Çø„Ç§„Éó„ÅÆË°®Á§∫
            st.write(f"**„Ç®„É©„Éº„Çø„Ç§„Éó:** {type(error_obj).__name__}")
            
            # Ë©≥Á¥∞ÊÉÖÂ†±„ÅÆË°®Á§∫ÔºàAppError„ÅÆÂ†¥ÂêàÔºâ
            if isinstance(error_obj, AppError) and error_details:
                st.write("**Ë©≥Á¥∞ÊÉÖÂ†±:**")
                for key, value in error_details.items():
                    st.write(f"- {key}: {value}")
            
            # „Çπ„Çø„ÉÉ„ÇØ„Éà„É¨„Éº„Çπ„ÅÆË°®Á§∫
            if hasattr(error_obj, '__traceback__') and error_obj.__traceback__:
                st.write("**„Çπ„Çø„ÉÉ„ÇØ„Éà„É¨„Éº„Çπ:**")
                trace_lines = traceback.format_exception(
                    type(error_obj), error_obj, error_obj.__traceback__
                )
                st.code(''.join(trace_lines))


def display_multiple_errors(
    errors: List[Exception],
    title: str = "Ë§áÊï∞„ÅÆ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü",
    container: Optional[Any] = None
) -> None:
    """
    Ë§áÊï∞„ÅÆ„Ç®„É©„Éº„Çí„Åæ„Å®„ÇÅ„Å¶Ë°®Á§∫„Åô„Çã
    
    Args:
        errors: Ë°®Á§∫„Åô„Çã‰æãÂ§ñ„ÅÆ„É™„Çπ„Éà
        title: „Ç®„É©„Éº„Çø„Ç§„Éà„É´
        container: Ë°®Á§∫„Åô„Çã„Ç≥„É≥„ÉÜ„ÉäÔºàÊåáÂÆö„Åó„Å™„ÅÑÂ†¥Âêà„ÅØst.errorÔºâ
    """
    container = container or st
    
    if not errors:
        return
    
    # „Ç®„É©„ÉºÊï∞„ÅÆË°®Á§∫
    container.error(f"**{title}** ({len(errors)}‰ª∂)")
    
    # „Ç®„É©„Éº„Åî„Å®„Å´Ë°®Á§∫
    for i, error in enumerate(errors, 1):
        error_message = get_detailed_error_message(error)
        container.error(f"{i}. {error_message}")
    
    # Ë©≥Á¥∞Ë°®Á§∫„ÅÆ„Ç®„ÇØ„Çπ„Éë„É≥„ÉÄ„Éº
    with container.expander("Ë©≥Á¥∞ÊÉÖÂ†±"):
        for i, error in enumerate(errors, 1):
            st.write(f"**„Ç®„É©„Éº {i}**")
            st.write(f"„Çø„Ç§„Éó: {type(error).__name__}")
            
            if isinstance(error, AppError) and hasattr(error, 'details'):
                st.write("Ë©≥Á¥∞:")
                for key, value in error.details.items():
                    st.write(f"- {key}: {value}")
            
            st.write("---")


class StreamlitErrorHandler:
    """StreamlitÁî®„ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº„ÇØ„É©„Çπ"""
    
    def __init__(self, logger: Optional[logging.Logger] = None):
        """
        ÂàùÊúüÂåñ
        
        Args:
            logger: ‰ΩøÁî®„Åô„Çã„É≠„Ç¨„ÉºÔºàÊåáÂÆö„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„É´„Éº„Éà„É≠„Ç¨„ÉºÔºâ
        """
        self.logger = logger or logging.getLogger()
        self.errors = []
    
    def __enter__(self):
        """„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Éû„Éç„Éº„Ç∏„É£„Éº„ÅÆ„Ç®„É≥„Éà„É™„Éº„Éù„Ç§„É≥„Éà"""
        self.errors = []
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """
        „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Éû„Éç„Éº„Ç∏„É£„Éº„ÅÆÁµÇ‰∫ÜÂá¶ÁêÜ
        
        Args:
            exc_type: ‰æãÂ§ñ„ÅÆÂûã
            exc_val: ‰æãÂ§ñ„ÅÆÂÄ§
            exc_tb: „Éà„É¨„Éº„Çπ„Éê„ÉÉ„ÇØ
            
        Returns:
            ‰æãÂ§ñ„ÇíÂá¶ÁêÜ„Åó„ÅüÂ†¥Âêà„ÅØTrue„ÄÅ„Åù„ÅÜ„Åß„Å™„ÅÑÂ†¥Âêà„ÅØFalse
        """
        if exc_val:
            # ‰æãÂ§ñ„Çí„É≠„Ç∞„Å´Ë®òÈå≤
            self.logger.error(f"„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {exc_val}", exc_info=(exc_type, exc_val, exc_tb))
            
            # „Ç®„É©„Éº„ÇíËøΩÂä†
            self.errors.append(exc_val)
            
            # „Ç®„É©„Éº„ÇíË°®Á§∫
            display_error(exc_val, show_details=True)
            
            # ‰æãÂ§ñ„ÇíÂá¶ÁêÜ„Åó„Åü„Åì„Å®„ÇíÁ§∫„Åô
            return True
        
        return False
    
    def handle(self, func, *args, **kwargs):
        """
        Èñ¢Êï∞„ÇíÂÆüË°å„Åó„ÄÅ„Ç®„É©„Éº„ÇíÂá¶ÁêÜ„Åô„Çã
        
        Args:
            func: ÂÆüË°å„Åô„ÇãÈñ¢Êï∞
            *args: Èñ¢Êï∞„ÅÆ‰ΩçÁΩÆÂºïÊï∞
            **kwargs: Èñ¢Êï∞„ÅÆ„Ç≠„Éº„ÉØ„Éº„ÉâÂºïÊï∞
            
        Returns:
            Èñ¢Êï∞„ÅÆÊàª„ÇäÂÄ§„ÄÅ„Åæ„Åü„ÅØ„Ç®„É©„ÉºÊôÇ„ÅØNone
        """
        try:
            return func(*args, **kwargs)
        except Exception as e:
            # ‰æãÂ§ñ„Çí„É≠„Ç∞„Å´Ë®òÈå≤
            self.logger.error(f"Èñ¢Êï∞ {func.__name__} „Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}", exc_info=True)
            
            # „Ç®„É©„Éº„ÇíËøΩÂä†
            self.errors.append(e)
            
            # „Ç®„É©„Éº„ÇíË°®Á§∫
            display_error(e, show_details=True)
            
            # „Ç®„É©„ÉºÊôÇ„ÅØNone„ÇíËøî„Åô
            return None
    
    async def handle_async(self, func, *args, **kwargs):
        """
        ÈùûÂêåÊúüÈñ¢Êï∞„ÇíÂÆüË°å„Åó„ÄÅ„Ç®„É©„Éº„ÇíÂá¶ÁêÜ„Åô„Çã
        
        Args:
            func: ÂÆüË°å„Åô„ÇãÈùûÂêåÊúüÈñ¢Êï∞
            *args: Èñ¢Êï∞„ÅÆ‰ΩçÁΩÆÂºïÊï∞
            **kwargs: Èñ¢Êï∞„ÅÆ„Ç≠„Éº„ÉØ„Éº„ÉâÂºïÊï∞
            
        Returns:
            Èñ¢Êï∞„ÅÆÊàª„ÇäÂÄ§„ÄÅ„Åæ„Åü„ÅØ„Ç®„É©„ÉºÊôÇ„ÅØNone
        """
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            # ‰æãÂ§ñ„Çí„É≠„Ç∞„Å´Ë®òÈå≤
            self.logger.error(f"ÈùûÂêåÊúüÈñ¢Êï∞ {func.__name__} „Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}", exc_info=True)
            
            # „Ç®„É©„Éº„ÇíËøΩÂä†
            self.errors.append(e)
            
            # „Ç®„É©„Éº„ÇíË°®Á§∫
            display_error(e, show_details=True)
            
            # „Ç®„É©„ÉºÊôÇ„ÅØNone„ÇíËøî„Åô
            return None
    
    def has_errors(self):
        """
        „Ç®„É©„Éº„Åå„ÅÇ„Çã„Åã„Å©„ÅÜ„Åã„ÇíÁ¢∫Ë™ç
        
        Returns:
            „Ç®„É©„Éº„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØTrue„ÄÅ„Åù„ÅÜ„Åß„Å™„ÅÑÂ†¥Âêà„ÅØFalse
        """
        return len(self.errors) > 0
    
    def get_errors(self):
        """
        „Ç®„É©„Éº„ÅÆ„É™„Çπ„Éà„ÇíÂèñÂæó
        
        Returns:
            „Ç®„É©„Éº„ÅÆ„É™„Çπ„Éà
        """
        return self.errors.copy()


def display_validation_errors(errors: Dict[str, str], container: Optional[Any] = None) -> None:
    """
    „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„Éº„ÇíË°®Á§∫„Åô„Çã
    
    Args:
        errors: „Éï„Ç£„Éº„É´„ÉâÂêç„Çí„Ç≠„Éº„ÄÅ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂÄ§„Å®„Åô„ÇãËæûÊõ∏
        container: Ë°®Á§∫„Åô„Çã„Ç≥„É≥„ÉÜ„ÉäÔºàÊåáÂÆö„Åó„Å™„ÅÑÂ†¥Âêà„ÅØst.errorÔºâ
    """
    container = container or st
    
    if not errors:
        return
    
    container.error("**ÂÖ•Âäõ„Éá„Éº„Çø„Å´„Ç®„É©„Éº„Åå„ÅÇ„Çä„Åæ„Åô**")
    
    # „Ç®„É©„Éº„ÅÆË°®Á§∫
    for field, message in errors.items():
        container.error(f"- **{field}**: {message}")


def format_api_error(error: APIError) -> str:
    """
    API„Ç®„É©„Éº„ÇíÊï¥ÂΩ¢„Åô„Çã
    
    Args:
        error: API„Ç®„É©„Éº
        
    Returns:
        Êï¥ÂΩ¢„Åï„Çå„Åü„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
    """
    if isinstance(error, GeminiAPIError):
        msg = f"Gemini API: {error.message}"
        if error.status_code:
            msg += f" („Ç≥„Éº„Éâ: {error.status_code})"
        if error.error_type:
            msg += f" - „Çø„Ç§„Éó: {error.error_type}"
        return msg
    else:
        msg = f"{error.api_name}: {error.message}"
        if error.status_code:
            msg += f" („Ç≥„Éº„Éâ: {error.status_code})"
        return msg
